/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:window1:683645:
  appc.background(230);
} //_CODE_:window1:683645:

public void getseverity(GCustomSlider source, GEvent event) { //_CODE_:Severity:615109:
  severity = source.getValueI();
} //_CODE_:Severity:615109:

public void SpawnPatient(GButton source, GEvent event) { //_CODE_:SpawnOne:691970:
    Patient newPatient = new Patient(1, severity);
    patients.add(newPatient);


    // Try to place in chair
    for (Chair c : chairs) {
        if (!c.occupied) {
            c.occupied = true;
            newPatient.occupiedChair = c;
            waitingqueue.add(newPatient);
            numofwaiting++;
            break;
        }
    }
} //_CODE_:SpawnOne:691970:

public void SpawnTenPatients(GButton source, GEvent event) { //_CODE_:SpawnTen:780667:
    for (int i = 0; i < 10; i++){
      Patient newPatient = new Patient(1, severity);
      patients.add(newPatient);
  
  
      // Try to place in chair
      for (Chair c : chairs) {
          if (!c.occupied) {
              c.occupied = true;
              newPatient.occupiedChair = c;
              waitingqueue.add(newPatient);
              numofwaiting++;
              break;
          }
      }
    }

} //_CODE_:SpawnTen:780667:

public void numofdoctors(GCustomSlider source, GEvent event) { //_CODE_:DoctorNumber:907397:
  tempDoctorvalue = source.getValueI();
} //_CODE_:DoctorNumber:907397:

public void confirmnumber(GButton source, GEvent event) { //_CODE_:confirmnumberdoc:567316:
  if (docSet == false){
    numDoctors = int(tempDoctorvalue);
    int bedsPerDoctor = beds.length/numDoctors;
    
    for (int i = 0; i< numDoctors; i++){
      int start = (i*bedsPerDoctor);
      int end = start+bedsPerDoctor-1;
      if (i == numDoctors-1){
        end = beds.length-1;
      }
      doctors.add(new Doctor(1, color(0, 0, 255 - i * 100), start, end));
    }
    docSet = true;
  }
} //_CODE_:confirmnumberdoc:567316:

public void numofbeds(GCustomSlider source, GEvent event) { //_CODE_:BedNumber:726698:
  tempBedvalue = source.getValueI();
} //_CODE_:BedNumber:726698:

public void confirmBedNum(GButton source, GEvent event) { //_CODE_:bedConfirm:550370:

  if (bedSet == false){
    beds = new Bed[tempBedvalue];
    for (int i = 0; i < beds.length; i++) {
      int row = i / 10;
      int col = i % 10;
      float x = 380 + col * 85;
      float y = 40 + row * 70;
      
      beds[i] = new Bed(new PVector(x,y));
    }
    bedSet = true;

  }
} //_CODE_:bedConfirm:550370:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  window1 = GWindow.getWindow(this, "Window title", 0, 0, 320, 300, JAVA2D);
  window1.noLoop();
  window1.setActionOnClose(G4P.KEEP_OPEN);
  window1.addDrawHandler(this, "win_draw1");
  label1 = new GLabel(window1, 16, 31, 80, 20);
  label1.setText("Patients");
  label1.setOpaque(false);
  Severity = new GCustomSlider(window1, 16, 48, 100, 50, "grey_blue");
  Severity.setShowValue(true);
  Severity.setLimits(2, 1, 3);
  Severity.setNumberFormat(G4P.INTEGER, 0);
  Severity.setOpaque(false);
  Severity.addEventHandler(this, "getseverity");
  SpawnOne = new GButton(window1, 130, 60, 80, 30);
  SpawnOne.setText("Spawn");
  SpawnOne.addEventHandler(this, "SpawnPatient");
  SpawnTen = new GButton(window1, 220, 60, 80, 30);
  SpawnTen.setText("Spawn Ten");
  SpawnTen.addEventHandler(this, "SpawnTenPatients");
  DoctorNumber = new GCustomSlider(window1, 16, 176, 100, 50, "grey_blue");
  DoctorNumber.setShowValue(true);
  DoctorNumber.setLimits(1, 1, 5);
  DoctorNumber.setNumberFormat(G4P.INTEGER, 0);
  DoctorNumber.setOpaque(false);
  DoctorNumber.addEventHandler(this, "numofdoctors");
  confirmnumberdoc = new GButton(window1, 130, 190, 80, 30);
  confirmnumberdoc.setText("Confirm");
  confirmnumberdoc.addEventHandler(this, "confirmnumber");
  BedNumber = new GCustomSlider(window1, 16, 112, 100, 50, "grey_blue");
  BedNumber.setShowValue(true);
  BedNumber.setLimits(60, 40, 80);
  BedNumber.setNumberFormat(G4P.INTEGER, 0);
  BedNumber.setOpaque(false);
  BedNumber.addEventHandler(this, "numofbeds");
  bedConfirm = new GButton(window1, 130, 120, 80, 30);
  bedConfirm.setText("Confirm");
  bedConfirm.addEventHandler(this, "confirmBedNum");
  BedsLabel = new GLabel(window1, 17, 96, 112, 20);
  BedsLabel.setText("Num. of Beds");
  BedsLabel.setOpaque(false);
  DoctorsLabel = new GLabel(window1, 17, 162, 104, 20);
  DoctorsLabel.setText("Num. of Doctors");
  DoctorsLabel.setOpaque(false);
  window1.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow window1;
GLabel label1; 
GCustomSlider Severity; 
GButton SpawnOne; 
GButton SpawnTen; 
GCustomSlider DoctorNumber; 
GButton confirmnumberdoc; 
GCustomSlider BedNumber; 
GButton bedConfirm; 
GLabel BedsLabel; 
GLabel DoctorsLabel; 
