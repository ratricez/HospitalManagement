/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:window1:683645:
  appc.background(230);
} //_CODE_:window1:683645:

public void getseverity(GCustomSlider source, GEvent event) { //_CODE_:Severity:615109:
  severity = source.getValueI();
} //_CODE_:Severity:615109:

public void SpawnPatient(GButton source, GEvent event) { //_CODE_:SpawnOne:691970:
    Patient newPatient = new Patient(1, severity); // Add the new patient depending on the sliders selected seveity
    patients.add(newPatient);  // Add the patient to the array list
    numofwaiting++;
    
    Doctor assignedDoctor = doctors.get(nextDoctorIndex); // Get the next doctor
    assignedDoctor.docPatients.add(newPatient); // Give the doctor the current patient
    nextDoctorIndex = (nextDoctorIndex + 1) % doctors.size(); // Find the next index of doctor (% by the number of doctors so it loops)

    // Try to place patient in chair
    for (Chair c : chairs) {
        if (!c.occupied) {
            c.occupied = true;
            newPatient.occupiedChair = c;
            waitingqueue.add(newPatient);
            break;
        }
    }
} //_CODE_:SpawnOne:691970:

public void SpawnTenPatients(GButton source, GEvent event) { //_CODE_:SpawnTen:780667:
    for (int i = 0; i < 10; i++){ // Spawn 10 patients (same code just run it ten times)
      Patient newPatient = new Patient(1, severity);
      patients.add(newPatient);
      numofwaiting++;
  
      Doctor assignedDoctor = doctors.get(nextDoctorIndex);
      assignedDoctor.docPatients.add(newPatient);
      nextDoctorIndex = (nextDoctorIndex + 1) % doctors.size();

  
      // Try to place in chair
      for (Chair c : chairs) {
          if (!c.occupied) {
              c.occupied = true;
              newPatient.occupiedChair = c;
              waitingqueue.add(newPatient);
              break;
          }
      }
    }

} //_CODE_:SpawnTen:780667:

public void numofdoctors(GCustomSlider source, GEvent event) { //_CODE_:DoctorNumber:907397:
  tempDoctorvalue = source.getValueI();
} //_CODE_:DoctorNumber:907397:

public void confirmnumber(GButton source, GEvent event) { //_CODE_:confirmnumberdoc:567316:
  if (docSet == false){ // If they haven't clicked confirm number of doctors yet...
    numDoctors = int(tempDoctorvalue); // Get the value from slider
    for (int i = 0; i< numDoctors; i++){
      doctors.add(new Doctor(1, color(0, 0, 255 - i * 30))); // Add doctors; however, slightly change their colour
    }
    docSet = true; // Change it to true so they can't change it again
  }
} //_CODE_:confirmnumberdoc:567316:

public void numofbeds(GCustomSlider source, GEvent event) { //_CODE_:BedNumber:726698:
  tempBedvalue = source.getValueI();
} //_CODE_:BedNumber:726698:

public void confirmBedNum(GButton source, GEvent event) { //_CODE_:bedConfirm:550370:

  if (bedSet == false){ // If they haven't clicked confirm beds yet...
    beds = new Bed[tempBedvalue]; // Create a list for beds the size of number
    for (int i = 0; i < beds.length; i++) { // Add x,y coordinates 
      int row = i / 10;
      int col = i % 10;
      float x = 380 + col * 85;
      float y = 40 + row * 70;
      
      beds[i] = new Bed(new PVector(x,y));
    }
    bedSet = true; // Set it to true so it only runs once
  }
} //_CODE_:bedConfirm:550370:

public void EnergyReset(GButton source, GEvent event) { //_CODE_:ResetEnergy:324541:
  for (Doctor doc : doctors) { // Reset all the doctors energy
    doc.energy = 1;
  }

} //_CODE_:ResetEnergy:324541:

public void speedfactor(GSlider source, GEvent event) { //_CODE_:speedFactoree:307611:
  speedFactor = source.getValueF();
} //_CODE_:speedFactoree:307611:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  window1 = GWindow.getWindow(this, "Control Window", 0, 0, 320, 360, JAVA2D);
  window1.noLoop();
  window1.setActionOnClose(G4P.KEEP_OPEN);
  window1.addDrawHandler(this, "win_draw1");
  label1 = new GLabel(window1, 20, 20, 135, 20);
  label1.setText("Patients (Severity)");
  label1.setOpaque(false);
  Severity = new GCustomSlider(window1, 20, 40, 100, 50, "grey_blue");
  Severity.setShowValue(true);
  Severity.setLimits(2, 1, 3);
  Severity.setNumberFormat(G4P.INTEGER, 0);
  Severity.setOpaque(false);
  Severity.addEventHandler(this, "getseverity");
  SpawnOne = new GButton(window1, 130, 50, 80, 30);
  SpawnOne.setText("Spawn");
  SpawnOne.addEventHandler(this, "SpawnPatient");
  SpawnTen = new GButton(window1, 220, 50, 80, 30);
  SpawnTen.setText("Spawn Ten");
  SpawnTen.addEventHandler(this, "SpawnTenPatients");
  DoctorNumber = new GCustomSlider(window1, 20, 200, 100, 50, "grey_blue");
  DoctorNumber.setShowValue(true);
  DoctorNumber.setLimits(1, 1, 5);
  DoctorNumber.setNumberFormat(G4P.INTEGER, 0);
  DoctorNumber.setOpaque(false);
  DoctorNumber.addEventHandler(this, "numofdoctors");
  confirmnumberdoc = new GButton(window1, 130, 210, 80, 30);
  confirmnumberdoc.setText("Confirm");
  confirmnumberdoc.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  confirmnumberdoc.addEventHandler(this, "confirmnumber");
  BedNumber = new GCustomSlider(window1, 20, 120, 100, 50, "grey_blue");
  BedNumber.setShowValue(true);
  BedNumber.setLimits(60, 40, 80);
  BedNumber.setNumberFormat(G4P.INTEGER, 0);
  BedNumber.setOpaque(false);
  BedNumber.addEventHandler(this, "numofbeds");
  bedConfirm = new GButton(window1, 130, 130, 80, 30);
  bedConfirm.setText("Confirm");
  bedConfirm.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  bedConfirm.addEventHandler(this, "confirmBedNum");
  BedsLabel = new GLabel(window1, 20, 100, 112, 20);
  BedsLabel.setText("Num. of Beds");
  BedsLabel.setOpaque(false);
  DoctorsLabel = new GLabel(window1, 20, 180, 104, 20);
  DoctorsLabel.setText("Num. of Doctors");
  DoctorsLabel.setOpaque(false);
  ResetEnergy = new GButton(window1, 20, 260, 100, 50);
  ResetEnergy.setText("Shift Change");
  ResetEnergy.setLocalColorScheme(GCScheme.GOLD_SCHEME);
  ResetEnergy.addEventHandler(this, "EnergyReset");
  speedFactoree = new GSlider(window1, 130, 280, 100, 40, 10.0);
  speedFactoree.setShowValue(true);
  speedFactoree.setLimits(1.0, 0.5, 2.0);
  speedFactoree.setNumberFormat(G4P.DECIMAL, 2);
  speedFactoree.setOpaque(false);
  speedFactoree.addEventHandler(this, "speedfactor");
  label2 = new GLabel(window1, 130, 260, 80, 20);
  label2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label2.setText("Speed Factor");
  label2.setOpaque(false);
  window1.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow window1;
GLabel label1; 
GCustomSlider Severity; 
GButton SpawnOne; 
GButton SpawnTen; 
GCustomSlider DoctorNumber; 
GButton confirmnumberdoc; 
GCustomSlider BedNumber; 
GButton bedConfirm; 
GLabel BedsLabel; 
GLabel DoctorsLabel; 
GButton ResetEnergy; 
GSlider speedFactoree; 
GLabel label2; 
